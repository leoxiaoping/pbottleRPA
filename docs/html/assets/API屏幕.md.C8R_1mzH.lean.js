import{_ as e,c as r,a0 as t,o as p}from"./chunks/framework.DzSQaq9h.js";const l=JSON.parse('{"title":"屏幕画面","description":"","frontmatter":{},"headers":[],"relativePath":"API屏幕.md","filePath":"API屏幕.md","lastUpdated":1758945531000}'),n={name:"API屏幕.md"};function o(i,a,m,s,h,c){return p(),r("div",null,a[0]||(a[0]=[t('<h1 id="屏幕画面" tabindex="-1">屏幕画面 <a class="header-anchor" href="#屏幕画面" aria-label="Permalink to &quot;屏幕画面&quot;">​</a></h1><h2 id="getresolution-获取屏幕分辨率" tabindex="-1">getResolution 获取屏幕分辨率 <a class="header-anchor" href="#getresolution-获取屏幕分辨率" aria-label="Permalink to &quot;getResolution 获取屏幕分辨率&quot;">​</a></h2><p>获取当前屏幕分辨率， ratio 为桌面缩放比例</p><p>@returns JSON 内容格式 <code>{ w:1920,h:1080,ratio:1.5 }</code></p><h2 id="screenshot-屏幕截图" tabindex="-1">screenShot 屏幕截图 <a class="header-anchor" href="#screenshot-屏幕截图" aria-label="Permalink to &quot;screenShot 屏幕截图&quot;">​</a></h2><p>@param {*} savePath 保存路径默认 我的图片，图片格式为PNG；如果使用自定义路径请以 &#39;.png&#39; 结尾;</p><p>@param {*} x 截图开始位置</p><p>@param {*} y</p><p>@param {*} w 截图宽度</p><p>@param {*} h 截图长度</p><h2 id="getscreencolor-获取屏幕颜色" tabindex="-1">getScreenColor 获取屏幕颜色 <a class="header-anchor" href="#getscreencolor-获取屏幕颜色" aria-label="Permalink to &quot;getScreenColor 获取屏幕颜色&quot;">​</a></h2><p>屏幕一个点取色</p><p>@param {*} x</p><p>@param {*} y</p><p>@returns 返回颜色值</p><h2 id="findscreen-寻找图像" tabindex="-1">findScreen 寻找图像 <a class="header-anchor" href="#findscreen-寻找图像" aria-label="Permalink to &quot;findScreen 寻找图像&quot;">​</a></h2><p>屏幕查找图象定位</p><p>@param {string} tpPath 搜索的小图片，建议png格式 相对路径</p><p>@param {number} miniSimilarity 可选，指定最低相似度，默认0.9。取值0-1，1为找到完全相同的。</p><p>@param {number} fromX=0 可选，查找开始的开始横坐标</p><p>@param {number} fromY=0 可选，查找开始的开始纵坐标</p><p>@param {number} width=-1 可选，搜索宽度</p><p>@param {number} height=-1 可选，搜索高度</p><p>@returns 返回找到的结果json 格式：<code>{x,y}</code></p><h2 id="waitimage-等待图像出现" tabindex="-1">waitImage 等待图像出现 <a class="header-anchor" href="#waitimage-等待图像出现" aria-label="Permalink to &quot;waitImage 等待图像出现&quot;">​</a></h2><p>等待屏幕上的图片出现</p><p>@param {string} tpPath 图片模板路径 相对路径：./image/123.png</p><p>@param {Function} intervalFun 检测间隔的操作，function格式</p><p>@param {number} timeOut 等待超时时间 单位秒</p><p>@returns {position|boolean} 结果的位置信息，json格式：<code>{x,y}</code></p><h4 id="调试" tabindex="-1">调试 <a class="header-anchor" href="#调试" aria-label="Permalink to &quot;调试&quot;">​</a></h4><p>等待图片超时情况，小瓶RPA会立刻全屏截图并保存到 <code>电脑-》我的图片</code> 供后续判断排查。</p><h2 id="findcontours-寻找轮廓" tabindex="-1">findContours 寻找轮廓 <a class="header-anchor" href="#findcontours-寻找轮廓" aria-label="Permalink to &quot;findContours 寻找轮廓&quot;">​</a></h2><p>@param {number} minimumArea 轮廓最小面积 默认过滤掉 10x10 以下的元素</p><p>@param {number} fromX 开始坐标</p><p>@param {number} fromY</p><p>@param {number} width 作用范围</p><p>@param {number} height</p><p>@returns {array} 所有查找到的轮廓信息，包含闭合区域的起始坐标，中点坐标，面积，id。 格式：<code>[{ x: 250, y: 10, cx: 265.5, cy: 30.5, area: 2401, id: 42 },...]</code></p><p>屏幕查找物体或者窗口轮廓</p><h2 id="imgsimilar-图片相似度对比" tabindex="-1">imgSimilar 图片相似度对比 <a class="header-anchor" href="#imgsimilar-图片相似度对比" aria-label="Permalink to &quot;imgSimilar 图片相似度对比&quot;">​</a></h2><p>图片相似度对比 需要小瓶RPA客户端版本 &gt; V2025.3</p><p>@param {string} path1 图片1路径</p><p>@param {string} path2 图片2路径</p><p>@param &#39;SIFT&#39; | &#39;ORB&#39; | &#39;SSIM&#39; checkType 对比算法 默认 &#39;ORB&#39;</p><p>@returns {score:number, time:number} score相似度分数 0-1 ; time耗时秒</p><h4 id="调试-1" tabindex="-1">调试 <a class="header-anchor" href="#调试-1" aria-label="Permalink to &quot;调试&quot;">​</a></h4><p>软件 home 目录会生成 debug/findContours.png</p>',48)]))}const u=e(n,[["render",o]]);export{l as __pageData,u as default};
