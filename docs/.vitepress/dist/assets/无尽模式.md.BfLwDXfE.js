import{_ as e,c as t,a0 as o,o as r}from"./chunks/framework.DV-4xFRt.js";const m=JSON.parse('{"title":"流程执行的无尽模式","description":"","frontmatter":{},"headers":[],"relativePath":"无尽模式.md","filePath":"无尽模式.md","lastUpdated":1742369216000}'),l={name:"无尽模式.md"};function d(i,a,n,s,c,p){return r(),t("div",null,a[0]||(a[0]=[o('<h1 id="流程执行的无尽模式" tabindex="-1">流程执行的无尽模式 <a class="header-anchor" href="#流程执行的无尽模式" aria-label="Permalink to &quot;流程执行的无尽模式&quot;">​</a></h1><p>依赖 delaySet() ， 小瓶RPA可以稳定高效地连续执行流程任务.</p><p>A 任务是一个时间长短不定的流程，如果想让A任务不停的运行，这就不能用定时器准确启动了。我们可以 A 任务中开头设置接力任务A自己。这样 7X24 小时，A任务都可以满时效的运行。</p><h2 id="对比定时器优势" tabindex="-1">对比定时器优势 <a class="header-anchor" href="#对比定时器优势" aria-label="Permalink to &quot;对比定时器优势&quot;">​</a></h2><ul><li>定时器不能知道流程的具体结束时间，下次启动前会留有空隙，时效性差</li><li>定时器只能设置一个任务流程，无尽模式可以让多个任务流程交替接力执行</li></ul><h2 id="demo-示例" tabindex="-1">demo 示例 <a class="header-anchor" href="#demo-示例" aria-label="Permalink to &quot;demo 示例&quot;">​</a></h2><p>[企业版]接力执行脚本.js</p>',7)]))}const u=e(l,[["render",d]]);export{m as __pageData,u as default};
